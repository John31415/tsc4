{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    int f = s~load_int(32);
    tuple t = null();
    builder aux = begin_cell();
    int con = 0;
    int flag = 0;
    int flag2 = 0;
    int siz = 0;
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        }
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char = (char - 65 + shift) % 26 + 65;
        }
        if((97 <= char) & (char <= 122)){
            char = (char - 97 + shift) % 26 + 97;
        }
        if(flag == 0){
            if(flag2 == 0){
                aux~store_int(f,32);
                flag2 = -1;
            }
            aux~store_uint(char,8);
            con += 1;
            if(con == 123){
                siz += 1;
                flag = -1;
                t~push_back(aux);
                ;; t = cons(char,t);
                con = 0;
                aux = begin_cell();
            }
        }
        else {
            aux~store_uint(char,8);
            con += 1;
            if(con == 127){ 
                t~push_back(aux);
                ;; t = cons(aux,t);
                siz += 1;
                con = 0;
                aux = begin_cell();
            }
        }
    }
    if(con){
        t~push_back(aux);
        ;; t = cons(aux,t); 
        siz += 1; 
    } 
    builder last_builder = begin_cell(); 
    last_builder = t~pop_back(); 
    cell last_cell = last_builder.end_cell();
    siz -= 1;
    while(~ t.is_null()){
        builder tb = t~pop_back();
        last_cell = tb.store_ref(last_cell).end_cell();
    }
    return last_cell;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    int f = s~load_int(32);
    tuple t = null();
    builder aux = begin_cell();
    int con = 0;
    int flag = 0;
    int flag2 = 0;
    int siz = 0;
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        } 
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char = (char - 65 - shift) % 26 + 65;
        }
        if((97 <= char) & (char <= 122)){
            char = (char - 97 - shift) % 26 + 97;
        }
        if(flag == 0){
            if(flag2 == 0){
                aux~store_int(f,32);
                flag2 = -1;
            }
            aux~store_uint(char,8);
            con += 1;
            if(con == 123){
                siz += 1;
                flag = -1;
                t~push_back(aux);
                ;; t = cons(char,t);
                con = 0;
                aux = begin_cell();
            }
        }
        else {
            aux~store_uint(char,8);
            con += 1;
            if(con == 127){ 
                t~push_back(aux);
                ;; t = cons(aux,t);
                siz += 1;
                con = 0;
                aux = begin_cell();
            }
        }
    }
    if(con){
        t~push_back(aux);
        ;; t = cons(aux,t); 
        siz += 1; 
    } 
    builder last_builder = begin_cell(); 
    last_builder = t~pop_back(); 
    cell last_cell = last_builder.end_cell();
    siz -= 1;
    while(~ t.is_null()){
        builder tb = t~pop_back();
        last_cell = tb.store_ref(last_cell).end_cell();
    }
    return last_cell;
}
;; 5.4792956450110095
;; 559135962

