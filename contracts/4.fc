{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    int f = s~load_int(32);
    builder string = begin_cell().store_int(f,32);
    tuple chars = null();
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        }
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char += shift;
            if(char > 90){
                char -= 26;
            }
        }
        if((97 <= char) & (char <= 122)){
            char += shift;
            if(char > 122){
                char -= 26;
            }
        }
        chars = cons(char,chars);
    }
    do{
        int char = chars~list_next();
        string~store_uint(char,8);
    }until(null?(chars));
    return string.end_cell();
    ;; return begin_cell().end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    int f = s~load_int(32);
    builder string = begin_cell().store_int(f,32);
    tuple chars = null();
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        }
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char += shift;
            if(char < 65){
                char += 26;
            }
        }
        if((97 <= char) & (char <= 122)){
            char += shift;
            if(char < 97){
                char += 26;
            }
        }
        chars = cons(char,chars);
    }
    do{
        int char = chars~list_next();
        string~store_uint(char,8);
    }until(null?(chars));
    return string.end_cell();
    ;; return begin_cell().end_cell();
}

