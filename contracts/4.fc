{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    int f = s~load_int(32);
    builder string = begin_cell().store_int(f,32);
    tuple chars = null();
    tuple chars2 = null();
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        }
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char = (char - 65 + shift) % 26 + 65;
        }
        if((97 <= char) & (char <= 122)){
            char = (char - 97 + shift) % 26 + 97;
        }
        string~store_uint(char,8);
        chars = cons(char,chars);
    }
    while(~ chars.null?()){
        int char = chars~list_next();
        chars2 = cons(char,chars2); 
    }
    while(~ chars2.null?()){
        int char = chars2~list_next();
        string~store_uint(char,8);
    }
    return string.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift %= 26;
    slice s = text.begin_parse();
    int f = s~load_int(32);
    builder string = begin_cell().store_int(f,32);
    tuple chars = null();
    tuple chars2 = null();
    while(~ s.slice_empty?()){
        if(s.slice_data_empty?()){
            s = s~load_ref().begin_parse();
        }
        int char = s~load_uint(8);
        if((65 <= char) & (char <= 90)){
            char = (char - 65 - shift) % 26 + 65;
        }
        if((97 <= char) & (char <= 122)){
            char = (char - 97 - shift) % 26 + 97;
        }
        string~store_uint(char,8);
        chars = cons(char,chars);
    }
    while(~ chars.null?()){
        int char = chars~list_next();
        chars2 = cons(char,chars2); 
    }
    while(~ chars2.null?()){
        int char = chars2~list_next();
        string~store_uint(char,8);
    }
    return string.end_cell();
}

